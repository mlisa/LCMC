let
  class List (f:int, r:List) {
    fun first:int() f;
    fun rest:List() r; 
  }
  
  fun printList:List (l:List) 
    let  
      fun makeList:List (l:List, i:int) new List (i,l);
      fun printL:List (l:List)    
        if (l == null) then {null}
                       else {makeList(printL(l.rest()),print(l.first()))};
    in  printL(l);                 
  
  fun append:List (l1:List, l2:List)
      if (l1 == null)
        then {l2}
        else {new List(l1.first(), append(l1.rest(),l2))} ;  
    
  fun filter:List (l:List,check:(int)->bool) 
      if (l == null) 
        then {null}
        else {if (check(l.first()))
              then {new List(l.first(),filter(l.rest(),check))}
              else {filter(l.rest(),check)}};
       
  fun quicksort:List (l:List, rel:(int,int)->bool)    
      let
        var pivot:int = if (l==null) then {0} else {l.first()}; 
        fun prec:bool (x:int) rel(x,pivot);
        fun succ:bool (x:int) rel(pivot,x);
      in        
         if (l == null) 
           then {null}
           else {append( quicksort(filter(l,prec),rel),
                         new List(pivot, quicksort(filter(l,succ),rel)) )};
           
  fun increasing:List(l:List) 
    let fun inc:bool (x:int,y:int) not(y<=x);
    in quicksort(l,inc);
  
  fun decreasing:List(l:List) 
    let fun dec:bool (x:int,y:int) not(x<=y);
    in quicksort(l,dec);   
  var l:List = new List (3, 
                    new List(4,
                        new List(6,
                            new List (1, 
                                new List(2,
                                    new List(5,null))))));
  
in printList(decreasing(l));


/*let 
  fun x:int(i:int, j:int) i-j;
  fun f:int (i:int, j:int, x:(int, int)->int) x(i, j) + j;
in
	if(3 == 3) then { print (f(3,5,x)) }
	else { print(2) };


/*let

  class Account (money:int) {
    fun getMon:int () money;
  }
  
  class TradingAcc extends Account (invested:int) {
    fun getInv:int () invested;
  }
  
  class BankLoan (loan: Account) {
    fun getLoan:Account () loan;
    fun openLoan:Account (m:TradingAcc) 
    	if ((m.getMon()+m.getInv())>=30000) 
      	then {new Account(loan.getMon())} 
      	else {null};
  } 
  
  class MyBankLoan extends BankLoan (loan: TradingAcc) {
    fun openLoan:TradingAcc (l:Account) if (l.getMon()>=20000) 
      then {new TradingAcc(loan.getMon(),loan.getInv())} 
      else {null};
  } 
    
  var bl:BankLoan = new MyBankLoan(new TradingAcc(50000,40000));
  var myTradingAcc:TradingAcc = new TradingAcc(20000,5000);
  var myLoan:Account = bl.openLoan(myTradingAcc);
      
in print(if (myLoan==null) then {0} else {myLoan.getMon()}); 



/*let 
  fun x:int(i:int, j:int) i-j;
  fun f:int (i:int, j:int, x:(int, int)->int) x(i, j) + j;
in
	if(3 == 3) then { print (f(3,5,x)) }
	else { print(2) };

/*let
  
  class A (x:int, y:int) {
	fun getX:int() x;
  	fun getY:int() y;
  }

  fun f:int(x:A, rel:(A)->bool) 
  	if(rel(x))
  	 then {x.getX()}
	 else {x.getY()};

  fun r:bool(x:A)
  	if(x.getX() == x.getY())
  	 then {true}
  	 else {false};

  fun make:A(a:A)
  	if(a == null)
  	 then {new A(1,1)}	
	 else {a};
	 
var x:A = null;

in
	print(f(make(x),r));

/*let 
  fun x:int(i:int, j:int) i-j;
  fun f:int (i:int, j:int, x:(int, int)->int) x(i, j) + j;
in
	if(2 == 3) then { print (f(3,5,x)) }
	else { print(2) };

/*let
  var y:int = 5+3;
  fun f:bool (n:int, m:int)
    let 
      var x:int = m;
  	in x==y;   
in  
  print ( 
    if f(y,8) 
      then { false }
      else { 10 }
  ); 
  
/*  
 let 
  fun x:int(i:int, j:int) i-j;
  fun f:int (i:int, j:int, x:(int, int)->int) x(i, j) + j;
in
  print (f(3,5));

/*
let 
  fun x:int(i:int, j:int) i-j;
  fun f:int (i:int, j:int, x:(int, int)->int) x(i, j) + j;
in
	if(2 == 3) then { print (f(3,5,x)) }
	else { print(2) };
  	
/*
let 	  
  fun g:int (x:(int)->int, j:(int)->int)
  let
   var i:(int)->int=j;
  in
   x(4) - i(6);
  
  fun k:int (j:int)
  	  j * 2;
  fun f:int (i:int)
    let
      fun z:int (j:int)
      	j + 2;
	  fun h:int (j:int)
	  	z(j)*5;
	in 
	  h(i)+1;
  
  
  var b:int=5;
  fun t:int() b;
  fun a:int(m:((int)->int,(int)->int)->int)
    m(f,k);
in
  print (a(g));
  print(10 || false);


/*

let
  var y:int = 5+2;
  fun f:bool (n:int, m:int)
    let 
      var x:int = m;
  in x==y;   
in  
  print ( 
    if f(y,8) 
      then { false }
      else { 10 }
  ); 
  
  
  let 
  fun x:int(i:int, j:int) i-j;
  fun f:int (i:int, j:int, x:(int, int)->int) x(i, j) + j;
in
  print (f(3,5));

/*
let
	fun f:int(x:int)
		if(x==0) then {0}
		else { f(x-1); };

in
	f(2);

/*
let
  
  class A (x:int, y:int) {
	fun getX:int() x;
  	fun getY:int() y;
  }

  fun f:int(x:A, rel:(A)->bool) 
  	if(rel(x))
  	 then {x.getX()}
	 else {x.getY()};

  fun r:bool(x:A)
  	if(x.getX() == x.getY())
  	 then {true}
  	 else {false};

  fun make:A(a:A)
  	if(a == null)
  	 then {new A(1,1)}	
	 else {a};
	 
var x:A = null;

in
	print(f(make(x),r));

/*
let

  class Account (money:int) {
    fun getMon:int () money;
  }
  
  class TradingAcc extends Account (invested:int) {
    fun getInv:int () invested;
  }
  
  class BankLoan (loan: Account) {
    fun getLoan:Account () loan;
    fun openLoan:Account (m:TradingAcc) 
    	if ((m.getMon()+m.getInv())>=30000) 
      	then {new Account(loan.getMon())} 
      	else {null};
  } 
  
  class MyBankLoan extends BankLoan (loan: TradingAcc) {
    fun openLoan:TradingAcc (l:Account) if (l.getMon()>=20000) 
      then {new TradingAcc(loan.getMon(),loan.getInv())} 
      else {null};
  } 
    
  var bl:BankLoan = new MyBankLoan(new TradingAcc(50000,40000));
  var myTradingAcc:TradingAcc = new TradingAcc(20000,5000);
  var myLoan:Account = bl.openLoan(myTradingAcc);
      
in print(if (myLoan==null) then {0} else {myLoan.getMon()});  

/*  let 
  fun x:int(i:int, j:int) i-j;
  fun f:int (i:int, j:int, x:(int, int)->int) x(i, j) + j;
in
  print (f(3,5,x));
  
/* SERBATOIO ESEMPI
let 
  fun f:int (i:int, j:int) i+j;
in
  print (f(3,5));
  
let 
  fun f:int (i:int, j:int) i+j;
in
  print (f(3,5));
  
let 
  var x:int = 1;
  var b:bool = true;
in
  print (if (b) then { x+1 } else { x+2 });
---------------
let 
  fun f:int (i:int, j:int) i+j;
in
  print (f(3,5));
----------------
let
  var y:int = 5+2;
  fun f:bool (n:int, m:int)
    let 
      var x:int = m;
  in x==y;   
in  
  print ( 
    if f(y,8) 
      then { false }
      else { 10 }
  ); 
  
  
  let 
  fun x:int(i:int, j:int) i-j;
  fun f:int (i:int, j:int, x:(int, int)->int) x(i, j) + j;
in
  print (f(3,5));
*/