let

  class Account (money:int) {
    fun getMon:int () money;
  }
  
  class TradingAcc extends Account (invested:int) {
    fun getInv:int () invested;
  }
  
  class BankLoan (loan: Account) {
    fun getLoan:Account () loan;
    fun openLoan:Account (m:TradingAcc) if ((m.getMon()+m.getInv())>=30000) 
      then {new Account(loan.getMon())} 
      else {null};
  } 
  
  class MyBankLoan extends BankLoan (loan: TradingAcc) {
    fun openLoan:TradingAcc (l:Account) if (l.getMon()>=20000) 
      then {new TradingAcc(loan.getMon(),loan.getInv())} 
      else {null};
  } 
    
  var bl:BankLoan = new MyBankLoan(new TradingAcc(50000,40000));
  var myTradingAcc:TradingAcc = new TradingAcc(20000,5000);
  var myLoan:Account = bl.openLoan(myTradingAcc);
      
in print(if (myLoan==null) then {0} else {myLoan.getMon()});  


/*
let 	  
  fun g:int (x:(int)->int, j:(int)->int)
  let
   var i:(int)->int=j;
  in
   x(4)  - i(6);
  
  fun k:int (j:int)
  	  j * 2;
  fun f:int (i:int)
    let
      fun z:int (j:int)
      	j+2;
	  fun h:int (j:int)
	  	z(j)*5;
	in 
	  h(i)+1;
  
  
  var b:int=5;
  fun t:int() b;
  fun a:int(m:((int)->int,(int)->int)->int)
    m(f,k);
in
  print (a(g));



/*  let 
  fun x:int(i:int, j:int) i-j;
  fun f:int (i:int, j:int, x:(int, int)->int) x(i, j) + j;
in
  print (f(3,5,x));
  
/* SERBATOIO ESEMPI
let 
  fun f:int (i:int, j:int) i+j;
in
  print (f(3,5));
  
let 
  fun f:int (i:int, j:int) i+j;
in
  print (f(3,5));
  
let 
  var x:int = 1;
  var b:bool = true;
in
  print (if (b) then { x+1 } else { x+2 });
---------------
let 
  fun f:int (i:int, j:int) i+j;
in
  print (f(3,5));
----------------
let
  var y:int = 5+2;
  fun f:bool (n:int, m:int)
    let 
      var x:int = m;
  in x==y;   
in  
  print ( 
    if f(y,8) 
      then { false }
      else { 10 }
  ); 
  
  
  let 
  fun x:int(i:int, j:int) i-j;
  fun f:int (i:int, j:int, x:(int, int)->int) x(i, j) + j;
in
  print (f(3,5));
*/